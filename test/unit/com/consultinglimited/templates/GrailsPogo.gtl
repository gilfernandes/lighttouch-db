package ${pck};

/**
 * ${date}
 * @author ${author()}
 */
class ${entityName} ${extendsExpr()} {

        <% def printed = 0 %>
        static mapping = {
            id generator:'sequence', params:[sequence:'${entityName.toLowerCase()}_seq']
            columns {
            <% entityFields.each { attributes -> %>${attributes.title.equals('description') ? attributes.title + ' type:\'text\'' + (printed++ > 0 ? ',' : '') : ''}
            <% } %>
            }
        }
		
        <%
        def toStringAttrib
        entityFields.each { attributes ->
            def attributeName = attributes.title
            def attributeType = attributes.type
            if(attributeName.equals("name")) {
                toStringAttrib = attributeName
            }
        %>
        // field nr: ${attributes.id}
        ${attributeType.equals("text") ? "String" : attributeType} ${attributeName};
        <%
        }
        %>
   
        static constraints = {
        <%
        entityFields.each { attributes ->
                def attributeName = attributes.title;
                def attributeType = attributes.type;
                def required = attributes.required;
        %>
                ${attributeName}( ${attributes.minlength ? "minSize:" + attributes.minlength + ", ": ""} ${attributes.maxlength ? "maxSize:" + attributes.maxlength + ", ": ""}
                    blank: ${required ? false : true}, nullable: ${required ? false : true} 
                ) 
        <%
        }
        %>
        } // End constraints
        
        /**
         * Returns the string representation of this object.
         * @return the string representation of this object.
         */
        public String toString() {
            def stringBuilder = new StringBuilder()
            stringBuilder.append(this.getClass().simpleName + ":")
            this.properties.each {
                if (it.key != "metaClass" && it.key != "class" &&
                    (it.value instanceof String || it.value instanceof Boolean || it.value instanceof Long || it.value instanceof Integer)) {
                    stringBuilder.append(it.key).append(" ").append(it.value).append(";\\n")
                }
            }
            return stringBuilder.toString()
        }
}
